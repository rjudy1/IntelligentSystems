import matplotlib.pyplot as plt


def neuron(a, b, c, d, I=1.0, steps=1000, tau=.25):
    """
    This function is translated from the code in neuron_RS2.m based on the Izhikevich 2003
    paper. It allows the desired parameters to be input for a, b, c, d from the paper. It
    simulates an Izhikevich neuron given an injected current and timescale along with parameters.

    :param a: timescale of recovery variable
    :param b: sensitivity of recovery variable
    :param c: after-spike reset value for v
    :param d: after-spike reset of recovery variable u
    :param I: the injected current
    :param steps: number of time steps to run
    :param tau: microstep size to use

    :return: tspan: times used in simulation
    :return: spike_ts: list of spikes/no spikes during steps / tau
    :return: VV: list of membrane potentials
    """

    # initialize parameters
    V = -64  # membrane potential
    u = b * V  # recovery variable
    VV = []

    # use microsteps of tau for actual time steps
    tspan = [i * tau for i in range(int(steps / tau))]
    spike_ts = list()

    for _ in tspan:
        # Hodgkin-Huxley DFQs
        V += tau * (.04 * V ** 2 + 5 * V + 140 - u + I)
        u += tau * a * (b * V - u)

        # register spikes
        if V > 30:
            VV.append(30)
            V = c
            u += d
            spike_ts.append(1)
        else:
            VV.append(V)
            spike_ts.append(0)

    return tspan, spike_ts, VV


def plot_spiking(a, b, c, d, title, msr_extra=None):
    """
    Plot the spiking neurons given the parameters and title for the type of neuron

    :param a: timescale of recovery variable
    :param b: sensitivity of recovery variable
    :param c: after-spike reset value for v
    :param d: after-spike reset of recovery variable u
    :param title: title for type of robot
    :param msr_extra: list of spike rates to plot against during MSR phase
    :return: list of mean spike rates from simulation
    """
    steps, tau = 1000, .25

    # set up a plot for 5 possible input currents
    fig, axes = plt.subplots(5, 1)
    fig.suptitle(title)
    plt.subplots_adjust(hspace=1.3)
    mean_spike_rates = []
    for i in range(41):
        times, spike_ts, VV = neuron(a, b, c, d, I=float(i), steps=steps, tau=tau)
        if i % 10 == 0 and i != 0 or i == 1:
            axes[i // 10].set(ylabel='V_m (mV)')
            axes[i // 10].plot(times, VV)
            axes[i // 10].set_title(f'Injected Current I = {float(i)}')
            plt.xticks([int(max(times) // 10 * i) for i in range(11)], [str(i * steps // 10) for i in range(11)])
        # compute spike rates based on last 800 steps (since tau is .25,
        R = spike_ts[int((steps-800)/tau):].count(1) / 800
        mean_spike_rates.append(R)

    axes[4].set(xlabel='time step')
    plt.show()

    # plot mean spike rates
    if msr_extra is not None:
        plt.plot([i for i in range(41)], msr_extra, 'r--',
                 [i for i in range(41)], mean_spike_rates, 'bs')
        plt.legend(("Mean Spike Rate for Regular Spiking",
                   "Mean Spike Rate for Fast Spiking"))
    else:
        plt.plot([i for i in range(41)], mean_spike_rates)
    plt.title("Mean Spike Rate v Injected Input Current")
    plt.xlabel("Injected Current I")
    plt.ylabel("Mean Spike Rate")
    plt.show()

    return mean_spike_rates


def chatgpt_code():
    """
    This code is code for a regular spiking neuron as implemented by ChatGPT 3.5

    :return: the list of spike rates generated by modulating input current
    """
    import numpy as np
    import matplotlib.pyplot as plt

    # Izhikevich neuron parameters
    a = 0.02
    b = 0.2
    c = -65.0
    d = 8.0

    # Simulation parameters
    total_time_steps = 1000
    input_current_range = np.arange(0, 41, 1)  # Input current from 0 to 40 in steps of 1
    simulation_time_steps = 800  # Using the last 800 time-steps to calculate the rate

    # Initialize arrays to store spiking rates
    spiking_rates = []

    # Simulation loop for different input currents
    for I in input_current_range:
        v = c  # Membrane potential
        u = b * v  # Membrane recovery variable
        spikes = 0  # Count of spikes

        for t in range(total_time_steps):
            # Update membrane potential and recovery variable
            dv = 0.04 * v ** 2 + 5 * v + 140 - u + I
            du = a * (b * v - u)

            v += dv
            u += du

            # Check for spike and reset conditions
            if v >= 30:
                v = c
                u += d
                if t > total_time_steps-simulation_time_steps:
                    spikes += 1

        # Calculate spiking rate for this input current
        spiking_rate = spikes / simulation_time_steps
        spiking_rates.append(spiking_rate)

    # Plot the spiking rate versus input current (I)
    plt.plot(input_current_range, spiking_rates)
    plt.xlabel("Input Current (I)")
    plt.ylabel("Spiking Rate")
    plt.title("Spiking Rate vs. Input Current for Izhikevich Neuron")
    plt.grid(True)
    plt.show()

    return spiking_rates


def main():
    # run the code for a regular spiking and fast spiking neuron
    msr1 = plot_spiking(.02, .2, -65, 8, "Regular Spiking")
    msr2 = plot_spiking(.1, .2, -65, 2, "Fast Spiking", msr1)
    # compare regular spiking neuron to chatgpt generated RS neuron
    chatgps_spikerates = chatgpt_code()
    plt.xlabel("Input Current (I)")
    plt.ylabel("Spiking Rate")
    plt.plot([i for i in range(41)], msr1, 'r--',
             [i for i in range(41)], chatgps_spikerates, 'bs')
    plt.legend(("Mean Spike Rate for Regular Spiking",
                "Mean Spike Rate for ChatGPT Regular Spiking"))
    plt.show()


main()
